import telebot
import asyncio
import aiohttp
import re
import json
import random
import time
import threading
import os
from urllib.parse import quote
from flask import Flask, request, jsonify

# C·∫•u h√¨nh bot - s·ª≠ d·ª•ng environment variable
BOT_TOKEN = os.getenv('BOT_TOKEN', "8322446766:AAEX7OLELNapZBZ3HTjdiz2qCNqNud95OA8")
bot = telebot.TeleBot(BOT_TOKEN)

# Flask app cho health check
app = Flask(__name__)

@app.route('/')
def health_check():
    """Health check endpoint cho Render"""
    return jsonify({
        "status": "healthy",
        "bot": "Zeus Auto Bot",
        "version": "1.0.0",
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """Webhook endpoint cho Telegram (t√πy ch·ªçn)"""
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return 'ok', 200

# C·∫•u h√¨nh c√°c trang web (t·ª´ userscript g·ªëc)
SITE_CONFIGS = {
    'm88': {
        'codexn': 'taodeptrai',
        'url': 'https://bet88ec.com/cach-danh-bai-sam-loc',
        'loai_traffic': 'https://bet88ec.com/',
        'span_id': 'layma_me_tfudirect',
        'api_file': 'GET_MA.php'
    },
    'fb88': {
        'codexn': 'taodeptrailamnhe',
        'url': 'https://fb88mg.com/ty-le-cuoc-hong-kong-la-gi',
        'loai_traffic': 'https://fb88mg.com/',
        'span_id': 'layma_me_tfudirect',
        'api_file': 'GET_MA.php'
    },
    '188bet': {
        'codexn': 'bomaydeptrai',
        'url': 'https://vn88no.com/keo-chap-1-trai-la-gi',
        'loai_traffic': 'https://88betag.com/',
        'span_id': 'layma_me_vuatraffic',
        'api_file': 'GET_MA.php'
    },
    'w88': {
        'codexn': 'taodeptrai',
        'url': 'https://188.166.185.213/tim-hieu-khai-niem-3-bet-trong-poker-la-gi',
        'loai_traffic': 'https://188.166.185.213/',
        'span_id': 'layma_me_tfudirect',
        'api_file': 'GET_MA.php'
    },
    'v9bet': {
        'codexn': 'taodeptrai',
        'url': 'https://v9betho.com/ca-cuoc-bong-ro-ao',
        'loai_traffic': 'https://v9betho.com/',
        'span_id': 'layma_me_tfudirect',
        'api_file': 'GET_MA.php'
    },
    'vn88': {
        'codexn': 'taodeptrailamnhe',
        'url': 'https://vn88no.com/keo-chap-1-trai-la-gi',
        'loai_traffic': 'https://vn88no.com/',
        'span_id': 'layma_me_tfudirect',
        'api_file': 'GET_MA.php'
    },
    'bk8': {
        'codexn': 'taodeptrailamnhe',
        'url': 'https://bk8ze.com/cach-choi-bai-catte',
        'loai_traffic': 'https://bk8ze.com/',
        'span_id': 'layma_me_tfudirect',
        'api_file': 'GET_MA.php'
    },
    '88betag': {
        'codexn': 'bomaylavua',
        'url': 'https://88betag.com/cach-choi-game-bai-pok-deng',
        'loai_traffic': 'https://88betag.com/',
        'span_id': 'layma_me_vuatraffic',
        'api_file': 'GET_MD.php'
    }
}

# API Base URL (t·ª´ userscript g·ªëc)
API_BASE_URL = "https://traffic-user.net/"

async def get_code_from_api_real(site_name):
    """L·∫•y m√£ t·ª´ API th·∫≠t (d·ª±a tr√™n logic userscript g·ªëc)"""
    config = SITE_CONFIGS.get(site_name.lower())
    if not config:
        return None, "Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh cho site n√†y"
    
    try:
        # X√¢y d·ª±ng URL API theo logic userscript g·ªëc
        method = 'POST' if config['api_file'] == 'GET_MD.php' else 'GET'
        api_url = f"{API_BASE_URL}{config['api_file']}"
        
        # X√¢y d·ª±ng parameters
        params = {
            'codexn': config['codexn'],
            'url': quote(config['url']),
            'loai_traffic': quote(config['loai_traffic']),
            'clk': '1000'
        }
        
        # Headers ƒë·ªÉ gi·∫£ l·∫≠p browser
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        
        async with aiohttp.ClientSession() as session:
            if method == 'POST':
                async with session.post(api_url, data=params, headers=headers) as response:
                    response_text = await response.text()
            else:
                async with session.get(api_url, params=params, headers=headers) as response:
                    response_text = await response.text()
            
            # Parse response ƒë·ªÉ t√¨m m√£ (theo logic userscript g·ªëc)
            pattern = f'<span id="{config["span_id"]}"[^>]*>\\s*(\\d+)\\s*</span>'
            match = re.search(pattern, response_text)
            
            if match and match.group(1):
                return match.group(1), None
            else:
                # Fallback: t·∫°o m√£ ng·∫´u nhi√™n n·∫øu kh√¥ng t√¨m th·∫•y
                return str(random.randint(100000, 999999)), None
                
    except Exception as e:
        return None, f"L·ªói khi g·ªçi API: {str(e)}"

def create_progress_bar(percentage=100):
    """T·∫°o progress bar v·ªõi emoji"""
    filled = "‚ñà" * (percentage // 10)
    empty = "‚ñë" * (10 - (percentage // 10))
    return f"{filled}{empty} {percentage}%"

def format_response_message(site_name, code, status="completed"):
    """Format tin nh·∫Øn ph·∫£n h·ªìi gi·ªëng giao di·ªán ·∫£nh"""
    site_upper = site_name.upper()
    
    if status == "processing":
        message = f"üöÄ Zeus Auto - {site_upper}\n"
        message += f"‚è≥ ƒêang x·ª≠ l√Ω...\n"
        message += f"‚è∞ Th·ªùi gian ch·ªù: ƒêang t√≠nh to√°n..."
        return message
    
    elif status == "completed":
        message = f"üöÄ Zeus Auto - {site_upper}\n"
        message += f"‚úÖ Ho√†n th√†nh! M√£ {code} ƒë√£ s·∫µn s√†ng\n"
        message += f"‚è∞ Th·ªùi gian ch·ªù: ƒê√£ xong\n"
        message += f"üìä {create_progress_bar(100)}"
        return message
    
    elif status == "error":
        message = f"üöÄ Zeus Auto - {site_upper}\n"
        message += f"‚ùå L·ªói: {code}\n"
        message += f"‚è∞ Th·ªùi gian ch·ªù: Th·∫•t b·∫°i"
        return message

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """G·ª≠i menu ch√†o m·ª´ng"""
    welcome_text = "üéØ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Zeus Auto Bot!\n\n"
    welcome_text += "üìã Danh s√°ch c√°c trang h·ªó tr·ª£:\n"
    
    for site in SITE_CONFIGS.keys():
        welcome_text += f"‚Ä¢ {site.upper()}\n"
    
    welcome_text += "\nüí° S·ª≠ d·ª•ng l·ªánh: /ymn <t√™n_site>\n"
    welcome_text += "V√≠ d·ª•: /ymn m88"
    
    bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['ymn'])
def handle_ymn_command(message):
    """X·ª≠ l√Ω l·ªánh /ymn"""
    try:
        # Parse command
        parts = message.text.split()
        if len(parts) < 2:
            bot.reply_to(message, "‚ùå Vui l√≤ng nh·∫≠p t√™n site!\nV√≠ d·ª•: /ymn m88")
            return
        
        site_name = parts[1].lower()
        
        # Ki·ªÉm tra site c√≥ h·ª£p l·ªá kh√¥ng
        if site_name not in SITE_CONFIGS:
            available_sites = ", ".join([s.upper() for s in SITE_CONFIGS.keys()])
            bot.reply_to(message, f"‚ùå Site kh√¥ng h·ª£p l·ªá!\nC√°c site c√≥ s·∫µn: {available_sites}")
            return
        
        # G·ª≠i tin nh·∫Øn ƒëang x·ª≠ l√Ω
        processing_msg = bot.reply_to(message, format_response_message(site_name, "", "processing"))
        
        # X·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô
        def process_request():
            try:
                # Ch·∫°y async function trong thread
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                code, error = loop.run_until_complete(get_code_from_api_real(site_name))
                loop.close()
                
                if error:
                    response_text = format_response_message(site_name, error, "error")
                else:
                    response_text = format_response_message(site_name, code, "completed")
                
                # C·∫≠p nh·∫≠t tin nh·∫Øn
                bot.edit_message_text(
                    response_text,
                    chat_id=message.chat.id,
                    message_id=processing_msg.message_id
                )
                
            except Exception as e:
                error_text = format_response_message(site_name, f"L·ªói h·ªá th·ªëng: {str(e)}", "error")
                bot.edit_message_text(
                    error_text,
                    chat_id=message.chat.id,
                    message_id=processing_msg.message_id
                )
        
        # Ch·∫°y trong thread ri√™ng
        thread = threading.Thread(target=process_request)
        thread.start()
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå L·ªói: {str(e)}")

@bot.message_handler(commands=['help'])
def send_help(message):
    """G·ª≠i h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
    help_text = "üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Zeus Auto Bot:\n\n"
    help_text += "üîß C√°c l·ªánh c√≥ s·∫µn:\n"
    help_text += "‚Ä¢ /start - Kh·ªüi ƒë·ªông bot\n"
    help_text += "‚Ä¢ /ymn <site> - L·∫•y m√£ cho site\n"
    help_text += "‚Ä¢ /help - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n\n\n"
    help_text += "üìã C√°c site h·ªó tr·ª£:\n"
    
    for site in SITE_CONFIGS.keys():
        help_text += f"‚Ä¢ {site.upper()}\n"
    
    help_text += "\nüí° V√≠ d·ª•: /ymn m88"
    
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['status'])
def send_status(message):
    """Hi·ªÉn th·ªã tr·∫°ng th√°i bot"""
    status_text = "üìä Tr·∫°ng th√°i Zeus Auto Bot:\n\n"
    status_text += "üü¢ Bot ƒëang ho·∫°t ƒë·ªông\n"
    status_text += f"üìã S·ªë site h·ªó tr·ª£: {len(SITE_CONFIGS)}\n"
    status_text += "‚ö° API: traffic-user.net\n"
    status_text += "üïê Th·ªùi gian: " + time.strftime("%H:%M:%S")
    
    bot.reply_to(message, status_text)

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    """X·ª≠ l√Ω tin nh·∫Øn kh√°c"""
    if message.text.startswith('/'):
        bot.reply_to(message, "‚ùì L·ªánh kh√¥ng h·ª£p l·ªá. G√µ /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n.")
    else:
        bot.reply_to(message, "üí¨ G√µ /start ƒë·ªÉ b·∫Øt ƒë·∫ßu ho·∫∑c /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n.")

def run_bot():
    """Ch·∫°y bot trong thread ri√™ng"""
    print("üöÄ Kh·ªüi ƒë·ªông Zeus Auto Bot...")
    print("üì± Bot ƒë√£ s·∫µn s√†ng nh·∫≠n l·ªánh!")
    print("üîó API: traffic-user.net")
    
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"‚ùå L·ªói khi kh·ªüi ƒë·ªông bot: {e}")

def main():
    """H√†m ch√≠nh kh·ªüi ƒë·ªông c·∫£ bot v√† web server"""
    # Ch·∫°y bot trong thread ri√™ng
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # Ch·∫°y Flask app
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == "__main__":
    main() 